{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Monaco;
\f3\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red255\green255\blue255;\red0\green0\blue0;
\red63\green110\blue116;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgray\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c24700\c43100\c45600;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Implement the following functions within the Binary Tree Class provided\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 int\cf4  calculateHeight(\cf5 TreeNode\cf4 *);\
\pard\tx220\tx720\pardeftab543\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf4 {\listtext	
\f2 \uc0\u8259 
\f1 	}This is a private method which takes a tree node (any node) and calculates the height of the tree which it is a root node of\
{\listtext	
\f2 \uc0\u8259 
\f1 	}This should be a recursive function which returns the height of the tree/sub-tree as an integer\
{\listtext	
\f2 \uc0\u8259 
\f1 	}This function shall be called by the public function 
\f3\b \cf0 \cb1 int height(void)
\f1\b0 \cf4 \cb3  which calls 
\f3\b \cf0 \cb1 calculateHeight
\f1\b0 \cf4 \cb3  using the overall binary tree's root node \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1\fs22 \cf2 int\cf4  calculateBalance(\cf5 TreeNode\cf4 * );
\f0\fs24 \cf0 \
\pard\tx220\tx720\pardeftab543\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0
\f1\fs22 \cf4 \cb3 {\listtext	
\f2 \uc0\u8259 
\f1 	}This is a private method which takes a tree node (any node) and sets the balance factor for each node within the tree/sub-tree\
{\listtext	
\f2 \uc0\u8259 
\f1 	}This should be a recursive function which returns an integer providing the height of the underlying left and/or right sub-trees so the current Tree Node can calculate its own height\
{\listtext	
\f2 \uc0\u8259 
\f1 	}This function shall be called by the public function 
\f3\b \cf0 \cb1 bool isInBalance(void)
\f1\b0 \cf4 \cb3  which calculates the balance factors of each node, and then calls 
\f3\b \cf0 \cb1 int getLargestBF(TreeNode*)
\f1\b0 \cf4 \cb3  and returns true if this returned integer is greater than 1 or less than -1. \cf2 \cb3 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 \
int\cf4  getLargestBF(\cf5 TreeNode\cf4 *);
\f0\fs24 \cf0 \
\pard\tx220\tx720\pardeftab543\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0
\f1\fs22 \cf4 \cb3 {\listtext	
\f2 \uc0\u8259 
\f1 	}This is a private method which takes a tree node (any node) and returns the largest balance factor in that tree/sub-tree.  This method does not affect the balance factor, just returns the largest balance factor found in the tree/sub-tree.  It is required that the 
\f3\b \cf0 \cb1 calculateBalance()
\f1\b0 \cf4 \cb3  function is called before this functions is called\
{\listtext	
\f2 \uc0\u8259 
\f1 	}This should be a recursive function which returns an integer providing the largest balance factor found in the underlying left and/or right sub-trees.  When you move down the left side of the tree, it will return the largest balance factor found for that branch.  Then, when you move down the right side of the tree, it will return the largest balance factor for that branch.  Then, you need to decide which of these is larger, and return it.\
{\listtext	
\f2 \uc0\u8259 
\f1 	}This function shall be called by the public function 
\f3\b \cf0 \cb1 int largestBF(void)
\f1\b0 \cf4 \cb3  which provides the root node of the entire binary tree when it calls the 
\f3\b \cf0 \cb1 getLargestBF
\f1\b0 \cf4 \cb3  function.  \cf2 \
}